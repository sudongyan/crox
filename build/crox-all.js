/**
 * @preserve Crox v1.4.4
 * https://github.com/thx/crox
 *
 * Released under the MIT license
 * md5: 1be3b944776028d02ee312e392715f17
 */
(function(root) {var Crox = (function() {
function Class(base, constructor, methods) {
	/// <param name="base" type="Function"></param>
	/// <param name="constructor" type="Function"></param>
	/// <param name="prototype" type="Object" optional="true"></param>
	function f() { }
	f.prototype = base.prototype;
	var t = new f;
	if (methods) {
		for (var i in methods)
			t[i] = methods[i];
	}
	if (!constructor)
		constructor = f;
	constructor.prototype = t;
	return constructor;
}

function Position(row, col) {
	this.row = row;
	this.col = col;
}
Position.prototype.toString = function() {
	return '(' + this.row + ',' + this.col + ')';
};

function getPos(s, index) {
	/// <summary>取得字符串中某个位置所在的行列</summary>
	/// <param name="s" type="String"></param>
	/// <param name="index" type="Number"></param>
	var t = s.substring(0, index);
	var re_nl = /\r\n?|\n/g;
	var m = t.match(re_nl);
	var row = 1;
	if (m) {
		row += m.length;
	}
	var col = 1 + /[^\r\n]*$/.exec(t)[0].length;
	return new Position(row, col);
}

function Enum(arr) {
	/// <param name="arr" type="Array"></param>
	var obj = {};
	for (var i = 0; i < arr.length; ++i)
		obj[arr[i]] = arr[i];
	return obj;
}

function inArr(a, t) {
	/// <param name="a" type="Array"></param>
	for (var i = 0; i < a.length; ++i)
		if (a[i] == t)
			return i;
	return -1;
}
function inArr_strict(a, t) {
	/// <param name="a" type="Array"></param>
	for (var i = 0; i < a.length; ++i)
		if (a[i] === t)
			return i;
	return -1;
}
function nodup(a, eq) {
	/// <param name="a" type="Array"></param>
	/// <param name="eq" type="Function" optional="true">比较函数</param>
	if (!eq) eq = function(a, b) { return a === b; };
	var b = [];
	var n = a.length;
	for (var i = 0; i < n; i++) {
		for (var j = i + 1; j < n; j++)
			if (eq(a[i], a[j]))
				j = ++i;
		b.push(a[i]);
	}
	return b;
}
function htmlEncode(s) {
	/// <param name="s" type="String"></param>
	/// <returns type="String" />
	return String(s).replace(/[&<>"]/g, function(a) {
		switch (a) {
			case '&': return '&amp;';
			case '<': return '&lt;';
			case '>': return '&gt;';
			default: return '&quot;';
		}
	});
}
function quote(s) {
	/// <param name="s" type="String"></param>
	/// <returns type="String" />
	return '"' + (s).replace(/[\x00-\x1f"\\\u2028\u2029]/g, function(a) {
		switch (a) {
			case '"': return '\\"';
			case '\\': return '\\\\';
			case '\b': return '\\b';
			case '\f': return '\\f';
			case '\n': return '\\n';
			case '\r': return '\\r';
			case '\t': return '\\t';
		}
		return '\\u' + ('000' + a.charCodeAt(0).toString(16)).slice(-4);
	}) + '"';
}
function singleQuote(s) {
	/// <param name="s" type="String"></param>
	/// <returns type="String" />
	return "'" + (s).replace(/[\x00-\x1f'\\\u2028\u2029]/g, function(a) {
		switch (a) {
			case "'": return "\\'";
			case '\\': return '\\\\';
			case '\b': return '\\b';
			case '\f': return '\\f';
			case '\n': return '\\n';
			case '\r': return '\\r';
			case '\t': return '\\t';
		}
		return '\\u' + ('000' + a.charCodeAt(0).toString(16)).slice(-4);
	}) + "'";
}
function phpQuote(s) {
	/// <param name="s" type="String"></param>
	/// <returns type="String" />
	return "'" + String(s).replace(/['\\]/g, '\\$&') + "'";
}
function evalNum(s) {
	return +s;
}
function evalStr(s) {
	return eval(s);
}

function encodeCommonName(s) {
	/// <param name="s" type="String"></param>
	return s.replace(/^_+/, '$&$&');
}

/// <reference path="common.js"/>
function createLexer(g) {

	function Token(tag, text, index, subMatches, end, pos) {
		this.tag = tag;
		this.text = text;
		this.index = index;
		this.subMatches = subMatches;
		this.end = end;
		this.pos = pos;
	}
	Token.prototype.toString = function() {
		return this.text;
	};
	function emptyFunc() { }
	function buildScanner(a) {
		var n = 1;
		var b = [];
		var matchIndexes = [1];
		var fa = [];
		for (var i = 0; i < a.length; ++i) {
			matchIndexes.push(n += RegExp('|' + a[i][0].source).exec('').length);
			fa.push(a[i][1] || emptyFunc);
			b.push('(' + a[i][0].source + ')');
		}

		var re = RegExp(b.join('|') + '|', 'g');
		return [re, matchIndexes, fa];
	}

	var endTag = g.$ || '$';
	var scanner = {};
	for (var i in g) {
		if (i.charAt(0) != '$')
			scanner[i] = buildScanner(g[i]);
	}

	return Lexer;
	function Lexer(s) {
		/// <param name="s" type="String"></param>
		var Length = s.length;
		var i = 0;
		var stateStack = [''];

		var obj = {
			text: '',
			index: 0,
			source: s,
			pushState: function(s) {
				stateStack.push(s);
			},
			popState: function() {
				stateStack.pop();
			},
			retract: function(n) {
				i -= n;
			}
		};
		var currentPos = new Position(1, 1);

		function scan() {
			var st = stateStack[stateStack.length - 1];
			var rule = scanner[st];
			var re = rule[0];
			re.lastIndex = i;
			var t = re.exec(s);
			if (t[0] == '') {
				if (i < Length) {
					throw Error('lexer error: ' + currentPos +
						'\n' + s.slice(i, i + 50));
				}
				return new Token(endTag, '', i, null, i, currentPos);
			}
			obj.index = i;
			i = re.lastIndex;
			var idx = rule[1];
			for (var j = 0; j < idx.length; ++j)
				if (t[idx[j]]) {
					var tag = rule[2][j].apply(obj, t.slice(idx[j], idx[j + 1]));
					if (tag == null) return null;
					return new Token(tag, t[0], obj.index, t.slice(idx[j] + 1, idx[j + 1]), i, currentPos);
				}
		}

		var re_newLine = /\r\n?|\n/g;
		var re_lastLine = /[^\r\n\u2028\u2029]*$/;
		return {
			scan: function() {
				do {
					var t = scan();
					if (t != null) {
						var _row = currentPos.row;
						var _col = currentPos.col;
						var ms = t.text.match(re_newLine);
						var h = ms ? ms.length : 0;
						_row += h;
						if (h == 0) _col += t.text.length;
						else _col = re_lastLine.exec(t.text)[0].length + 1;
						currentPos = new Position(_row, _col);
						return t;
					}
				} while (true);
			},
			GetCurrentPosition: function() {
				return currentPos;
			},
			getPos: function(i) {
				return getPos(s, i);
			}
		};
	}
}

/// <reference path="createLexer.js"/>
var Lexer = function() {
	var re_id = /[A-Za-z_]\w*/;
	var re_str = /"(?:[^"\\]|\\[\s\S])*"|'(?:[^'\\]|\\[\s\S])*'/;
	var re_num = /\d+(?:\.\d+)?(?:e-?\d+)?/;

	function isReserved(s) {
		return " abstract boolean break byte case catch char class const continue debugger default delete do double else enum export extends final finally float for function goto if implements import in instanceof int interface let long native new package private protected public return short static super switch synchronized this throw throws transient try typeof var void volatile while with yield ".indexOf(' ' + s + ' ') != -1;
	}
	var code = [
		[/\s+/],
		[/\/\/[^\r\n]*|\/\*[\s\S]*?\*\//],
		[re_id, function(a) {
			switch (a) {
				case 'true':
				case 'false':
					return 'boolean';
				case 'set':
				case 'include':
				case 'null':
					return a;
				default:
					if (isReserved(a) || a == 'null') throw Error("Reserved: " + a + ' ' + getPos(this.source, this.index));
					return 'realId';
			}
		}],
		[re_str, function(a) {
			return 'string';
		}],
		[re_num, function(a) {
			return 'number';
		}],
		[/{(?!{)/, function(a) { return '{'; }],
		[/}(?!})/, function(a) { return '}'; }],
		[function(a) {
			a.sort().reverse();
			for (var i = 0; i < a.length; ++i)
				a[i] = a[i].replace(/[()*+?.[\]|]/g, '\\$&');
			return RegExp(a.join('|'));
		}(["!", "%", "&&", "(", ")", "*", "+", "-", ".", "/", "<", "<=", "=", ">", ">=", "[", "]", "||", "===", "!==", "==", "!=", ",", ":", "?"]), function(a) {
			return /[*/%]/.test(a) ? 'mul' : /[<>]/.test(a) ? 'rel' : /[!=]=/.test(a) ? 'eq' : a;
		}]
	];

	var Lexer = createLexer({
        '': [
            [/{\*/, function(a) {
                this.pushState('{*');
                return a;
            }],
            [/(?:(?!{{|{\*|\*})[\s\S])+/, function(a) {
                return 'text';
            }],
			[/{{{/, function(a) {
				this.pushState(a);
				return a;
			}],
			[/{{(?:\/if|else|\/each|\/forin|\/raw)}}/, function(a) {
				return a;
			}],
            [/\*}/, function(a) {
                return a;
            }],
			[/{{#raw}}/, function(a) {
				this.pushState('raw');
				return a;
			}],
			[/{{<script>[\s\S]*?<\/script>}}/, function(a) {
				return 'script';
			}],
			[/{{(?:#(?:if|each|forin)(?=\s))?/, function(a) {
				this.pushState('{{');
				return a;
			}]
		],
		raw: [
			[/(?:(?!{{\/raw}})[\s\S])+/, function(a) {
				this.popState();
				return 'rawtext';
			}]
		],
		'{{': code.concat([
			[/}}/, function(a) {
				this.popState();
				return a;
			}]
		]),
		'{{{': code.concat([
			[/}}}/, function(a) {
				this.popState();
				return a;
			}]
		]),
        '{*': [
            [/(?:(?!\*})[\s\S])+/, function(a) {
                this.popState();
                return 'commenttext';
            }]
        ]
	});
	return Lexer;
}();

var parse = function() {

/*
state number: 153
symbol number: 75
conflicts: 5
state_3   text   s11, rstatement.9
statement: texts ●
texts: texts ● _text
_text: ● text
_text: ● {{#raw}} rawtext {{/raw}}
_text: ● {* commenttext *}


state_3   {{#raw}}   s12, rstatement.9
statement: texts ●
texts: texts ● _text
_text: ● text
_text: ● {{#raw}} rawtext {{/raw}}
_text: ● {* commenttext *}


state_3   {*   s13, rstatement.9
statement: texts ●
texts: texts ● _text
_text: ● text
_text: ● {{#raw}} rawtext {{/raw}}
_text: ● {* commenttext *}


state_44   [   s37, rid.1
statement: {{ set ● MemberExpression = expr }}
id: set ●
MemberExpression: ● PrimaryExpression
MemberExpression: ● MemberExpression . id
MemberExpression: ● MemberExpression [ expr ]
MemberExpression: ● MemberExpression ( args )
MemberExpression: ● MemberExpression ( empty )

PrimaryExpression: ● string
PrimaryExpression: ● number
PrimaryExpression: ● boolean
PrimaryExpression: ● id
PrimaryExpression: ● ( expr )
PrimaryExpression: ● ArrayLiteral
PrimaryExpression: ● ObjectLiteral
PrimaryExpression: ● null

id: ● realId
id: ● set
id: ● include

ArrayLiteral: ● [ ]
ArrayLiteral: ● [ ElementList ]

ObjectLiteral: ● { }
ObjectLiteral: ● { PropertyNameAndValueList }


state_44   (   s35, rid.1
statement: {{ set ● MemberExpression = expr }}
id: set ●
MemberExpression: ● PrimaryExpression
MemberExpression: ● MemberExpression . id
MemberExpression: ● MemberExpression [ expr ]
MemberExpression: ● MemberExpression ( args )
MemberExpression: ● MemberExpression ( empty )

PrimaryExpression: ● string
PrimaryExpression: ● number
PrimaryExpression: ● boolean
PrimaryExpression: ● id
PrimaryExpression: ● ( expr )
PrimaryExpression: ● ArrayLiteral
PrimaryExpression: ● ObjectLiteral
PrimaryExpression: ● null

id: ● realId
id: ● set
id: ● include

ArrayLiteral: ● [ ]
ArrayLiteral: ● [ ElementList ]

ObjectLiteral: ● { }
ObjectLiteral: ● { PropertyNameAndValueList }


*/

    var table = {
        "nStart":46,
        "tSymbols":["$","!","\u0026\u0026","(",")","*}","+",",","-",".",":","=","?","[","]","boolean","commenttext","eq","include","mul","null","number","rawtext","realId","rel","script","set","string","text","{","{*","{{","{{#each","{{#forin","{{#if","{{#raw}}","{{/each}}","{{/forin}}","{{/if}}","{{/raw}}","{{else}}","{{{","||","}","}}","}}}","AdditiveExpression","ArrayLiteral","ConditionalExpression","ElementList","Elision","EqualityExpression","LogicalAndExpression","LogicalOrExpression","MemberExpression","MultiplicativeExpression","ObjectLiteral","PrimaryExpression","PropertyAssignment","PropertyNameAndValueList","RelationalExpression","UnaryExpression","_text","args","assign","assigns","empty","expr","id","name","program","statement","statements","texts","program\u0027"],"tAction":[[-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,-1,0,-1,-1,-1,-1,-1,-1,0,0,0,0,0,-1,0,0,0,0],[-32768,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,11,0,13,9,7,8,6,12,0,0,0,0,0,10,0,0,0,0],[-2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-2,0,0,-2,0,-2,-2,-2,-2,-2,-2,0,0,0,0,0,-2,0,0,0,0],[-15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-15,0,0,11,0,13,-15,-15,-15,-15,12,-15,-15,-15,0,-15,-15,0,0,0,0],[-23,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-23,0,0,-23,0,-23,-23,-23,-23,-23,-23,-23,-23,-23,0,-23,-23,0,0,0,0],[-3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-3,0,0,-3,0,-3,-3,-3,-3,-3,-3,0,0,0,0,0,-3,0,0,0,0],[0,39,0,35,0,0,0,0,40,0,0,0,0,37,0,34,0,0,30,0,36,33,0,32,0,0,29,31,0,38,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,39,0,35,0,0,0,0,40,0,0,0,0,37,0,34,0,0,30,0,36,33,0,32,0,0,29,31,0,38,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,39,0,35,0,0,0,0,40,0,0,0,0,37,0,34,0,0,30,0,36,33,0,32,0,0,29,31,0,38,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,39,0,35,0,0,0,0,40,0,0,0,0,37,0,34,0,0,45,0,36,33,0,32,0,0,44,31,0,38,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,39,0,35,0,0,0,0,40,0,0,0,0,37,0,34,0,0,30,0,36,33,0,32,0,0,29,31,0,38,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[-25,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-25,0,0,-25,0,-25,-25,-25,-25,-25,-25,-25,-25,-25,0,-25,-25,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,47,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[-24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-24,0,0,-24,0,-24,-24,-24,-24,-24,-24,-24,-24,-24,0,-24,-24,0,0,0,0],[0,0,-34,-34,-34,0,-34,-34,-34,-34,-34,-34,-34,-34,-34,0,0,-34,-34,-34,0,0,0,-34,-34,0,-34,-34,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-34,-34,-34,-34],[0,0,-52,-52,-52,0,-52,-52,-52,-52,-52,-52,-52,-52,-52,0,0,-52,-52,-52,0,0,0,-52,-52,0,-52,-52,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-52,-52,-52,-52],[0,0,-36,-36,-36,0,-36,-36,-36,-36,-36,-36,-36,-36,-36,0,0,-36,-36,-36,0,0,0,-36,-36,0,-36,-36,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-36,-36,-36,-36],[0,0,-37,-37,-37,0,-37,-37,-37,-37,-37,-37,-37,-37,-37,0,0,-37,-37,-37,0,0,0,-37,-37,0,-37,-37,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-37,-37,-37,-37],[0,0,-59,49,-59,0,-59,-59,-59,51,-59,0,-59,50,-59,0,0,-59,-59,-59,0,0,0,-59,-59,0,-59,-59,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-59,-59,-59,-59],[0,0,-62,0,-62,0,-62,-62,-62,0,-62,0,-62,0,-62,0,0,-62,-62,-62,0,0,0,-62,-62,0,-62,-62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-62,-62,-62,-62],[0,0,-64,0,-64,0,-64,-64,-64,0,-64,0,-64,0,-64,0,0,-64,-64,52,0,0,0,-64,-64,0,-64,-64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-64,-64,-64,-64],[0,0,-67,0,-67,0,54,-67,53,0,-67,0,-67,0,-67,0,0,-67,-67,0,0,0,0,-67,-67,0,-67,-67,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-67,-67,-67,-67],[0,0,-69,0,-69,0,0,-69,0,0,-69,0,-69,0,-69,0,0,-69,-69,0,0,0,0,-69,55,0,-69,-69,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-69,-69,-69,-69],[0,0,-71,0,-71,0,0,-71,0,0,-71,0,-71,0,-71,0,0,56,-71,0,0,0,0,-71,0,0,-71,-71,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-71,-71,-71,-71],[0,0,57,0,-73,0,0,-73,0,0,-73,0,-73,0,-73,0,0,0,-73,0,0,0,0,-73,0,0,-73,-73,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-73,-73,-73,-73],[0,0,0,0,-75,0,0,-75,0,0,-75,0,59,0,-75,0,0,0,-75,0,0,0,0,-75,0,0,-75,-75,0,0,0,0,0,0,0,0,0,0,0,0,0,0,58,-75,-75,-75],[0,0,0,0,-77,0,0,-77,0,0,0,0,0,0,-77,0,0,0,-77,0,0,0,0,-77,0,0,-77,-77,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-77,-77,-77],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,0],[0,0,-29,-29,-29,0,-29,-29,-29,-29,-29,-29,-29,-29,-29,0,0,-29,-29,-29,0,0,0,-29,-29,0,-29,-29,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-29,-29,-29,-29],[0,0,-30,-30,-30,0,-30,-30,-30,-30,-30,-30,-30,-30,-30,0,0,-30,-30,-30,0,0,0,-30,-30,0,-30,-30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-30,-30,-30,-30],[0,0,-31,-31,-31,0,-31,-31,-31,-31,-31,-31,-31,-31,-31,0,0,-31,-31,-31,0,0,0,-31,-31,0,-31,-31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-31,-31,-31,-31],[0,0,-28,-28,-28,0,-28,-28,-28,-28,-28,-28,-28,-28,-28,0,0,-28,-28,-28,0,0,0,-28,-28,0,-28,-28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-28,-28,-28,-28],[0,0,-32,-32,-32,0,-32,-32,-32,-32,-32,-32,-32,-32,-32,0,0,-32,-32,-32,0,0,0,-32,-32,0,-32,-32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-32,-32,-32,-32],[0,0,-33,-33,-33,0,-33,-33,-33,-33,-33,-33,-33,-33,-33,0,0,-33,-33,-33,0,0,0,-33,-33,0,-33,-33,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-33,-33,-33,-33],[0,39,0,35,0,0,0,0,40,0,0,0,0,37,0,34,0,0,30,0,36,33,0,32,0,0,29,31,0,38,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,-38,-38,-38,0,-38,-38,-38,-38,-38,-38,-38,-38,-38,0,0,-38,-38,-38,0,0,0,-38,-38,0,-38,-38,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-38,-38,-38,-38],[0,-78,0,-78,0,0,0,65,-78,0,0,0,0,-78,66,-78,0,0,-78,0,-78,-78,0,-78,0,0,-78,-78,0,-78,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,30,0,0,0,0,32,0,0,29,71,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,0,0],[0,39,0,35,0,0,0,0,40,0,0,0,0,37,0,34,0,0,30,0,36,33,0,32,0,0,29,31,0,38,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,39,0,35,0,0,0,0,40,0,0,0,0,37,0,34,0,0,30,0,36,33,0,32,0,0,29,31,0,38,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,30,0,0,0,0,32,0,0,29,71,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,30,0,0,0,0,32,0,0,29,71,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,77,0],[0,0,-29,35,0,0,-29,0,-29,-29,0,0,-29,37,0,34,0,-29,30,-29,36,33,0,32,-29,0,29,31,0,38,0,0,0,0,0,0,0,0,0,0,0,0,-29,0,-29,0],[0,0,-30,-30,0,0,-30,0,-30,-30,0,0,-30,-30,0,0,0,-30,0,-30,0,0,0,0,-30,0,0,79,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-30,0,-30,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,80],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,81,0,0,0,0,0,0],[0,0,0,0,0,82,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,39,0,35,-78,0,0,0,40,0,0,0,0,37,0,34,0,0,30,0,36,33,0,32,0,0,29,31,0,38,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,39,0,35,0,0,0,0,40,0,0,0,0,37,0,34,0,0,30,0,36,33,0,32,0,0,29,31,0,38,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,30,0,0,0,0,32,0,0,29,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,39,0,35,0,0,0,0,40,0,0,0,0,37,0,34,0,0,30,0,36,33,0,32,0,0,29,31,0,38,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,39,0,35,0,0,0,0,40,0,0,0,0,37,0,34,0,0,30,0,36,33,0,32,0,0,29,31,0,38,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,39,0,35,0,0,0,0,40,0,0,0,0,37,0,34,0,0,30,0,36,33,0,32,0,0,29,31,0,38,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,39,0,35,0,0,0,0,40,0,0,0,0,37,0,34,0,0,30,0,36,33,0,32,0,0,29,31,0,38,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,39,0,35,0,0,0,0,40,0,0,0,0,37,0,34,0,0,30,0,36,33,0,32,0,0,29,31,0,38,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,39,0,35,0,0,0,0,40,0,0,0,0,37,0,34,0,0,30,0,36,33,0,32,0,0,29,31,0,38,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,39,0,35,0,0,0,0,40,0,0,0,0,37,0,34,0,0,30,0,36,33,0,32,0,0,29,31,0,38,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,39,0,35,0,0,0,0,40,0,0,0,0,37,0,34,0,0,30,0,36,33,0,32,0,0,29,31,0,38,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-4,0,-4,-4,-4,-4,-4,-4,0,0,-4,0,-4,-4,0,0,0,0],[0,0,0,0,97,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,98,0,0,0,0,0,0,99,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,39,0,35,0,0,0,101,40,0,0,0,0,37,0,34,0,0,30,0,36,33,0,32,0,0,29,31,0,38,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,39,0,35,0,0,0,0,40,0,0,0,0,37,0,34,0,0,30,0,36,33,0,32,0,0,29,31,0,38,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,-45,0,-45,0,0,0,-45,-45,0,0,0,0,-45,0,-45,0,0,-45,0,-45,-45,0,-45,0,0,-45,-45,0,-45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,-39,-39,-39,0,-39,-39,-39,-39,-39,-39,-39,-39,-39,0,0,-39,-39,-39,0,0,0,-39,-39,0,-39,-39,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-39,-39,-39,-39],[0,0,0,0,0,0,0,0,0,0,103,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,-22,0,0,0,0,0,0,0,-22,0,0,0,0,-22,0,0,-22,-22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-22,0],[0,0,0,0,0,0,0,104,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,105,0,0],[0,0,0,0,0,0,0,-49,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-49,0,0],[0,0,0,0,0,0,0,0,0,0,-21,0,0,0,0,0,0,0,-21,0,0,0,0,-21,0,0,-21,-21,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-21,0],[0,0,-47,-47,-47,0,-47,-47,-47,-47,-47,-47,-47,-47,-47,0,0,-47,-47,-47,0,0,0,-47,-47,0,-47,-47,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-47,-47,-47,-47],[0,0,-60,0,-60,0,-60,-60,-60,0,-60,0,-60,0,-60,0,0,-60,-60,-60,0,0,0,-60,-60,0,-60,-60,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-60,-60,-60,-60],[0,0,-61,0,-61,0,-61,-61,-61,0,-61,0,-61,0,-61,0,0,-61,-61,-61,0,0,0,-61,-61,0,-61,-61,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-61,-61,-61,-61],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,30,0,0,0,0,32,0,0,29,71,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-78,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,30,0,0,0,0,32,0,0,29,71,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-78,0],[-13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-13,0,0,-13,0,-13,-13,-13,-13,-13,-13,-13,-13,-13,0,-13,-13,0,0,0,0],[0,0,0,49,0,0,0,0,0,51,0,110,0,50,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,30,0,0,0,0,32,0,0,29,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-78,0],[-14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-14,0,0,-14,0,-14,-14,-14,-14,-14,-14,-14,-14,-14,0,-14,-14,0,0,0,0],[-26,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-26,0,0,-26,0,-26,-26,-26,-26,-26,-26,-26,-26,-26,0,-26,-26,0,0,0,0],[-27,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-27,0,0,-27,0,-27,-27,-27,-27,-27,-27,-27,-27,-27,0,-27,-27,0,0,0,0],[0,0,0,0,116,0,0,115,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,-57,0,0,-57,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,117,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,118,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,-53,-53,-53,0,-53,-53,-53,-53,-53,-53,-53,-53,-53,0,0,-53,-53,-53,0,0,0,-53,-53,0,-53,-53,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-53,-53,-53,-53],[0,0,-63,0,-63,0,-63,-63,-63,0,-63,0,-63,0,-63,0,0,-63,-63,-63,0,0,0,-63,-63,0,-63,-63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-63,-63,-63,-63],[0,0,-66,0,-66,0,-66,-66,-66,0,-66,0,-66,0,-66,0,0,-66,-66,52,0,0,0,-66,-66,0,-66,-66,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-66,-66,-66,-66],[0,0,-65,0,-65,0,-65,-65,-65,0,-65,0,-65,0,-65,0,0,-65,-65,52,0,0,0,-65,-65,0,-65,-65,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-65,-65,-65,-65],[0,0,-68,0,-68,0,54,-68,53,0,-68,0,-68,0,-68,0,0,-68,-68,0,0,0,0,-68,-68,0,-68,-68,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-68,-68,-68,-68],[0,0,-70,0,-70,0,0,-70,0,0,-70,0,-70,0,-70,0,0,-70,-70,0,0,0,0,-70,55,0,-70,-70,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-70,-70,-70,-70],[0,0,-72,0,-72,0,0,-72,0,0,-72,0,-72,0,-72,0,0,56,-72,0,0,0,0,-72,0,0,-72,-72,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-72,-72,-72,-72],[0,0,57,0,-74,0,0,-74,0,0,-74,0,-74,0,-74,0,0,0,-74,0,0,0,0,-74,0,0,-74,-74,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-74,-74,-74,-74],[0,0,0,0,0,0,0,0,0,0,119,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,13,9,7,8,6,12,0,0,121,0,122,10,0,0,0,0],[0,0,-35,-35,-35,0,-35,-35,-35,-35,-35,-35,-35,-35,-35,0,0,-35,-35,-35,0,0,0,-35,-35,0,-35,-35,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-35,-35,-35,-35],[0,-78,0,-78,0,0,0,65,-78,0,0,0,0,-78,0,-78,0,0,-78,0,-78,-78,0,-78,0,0,-78,-78,0,-78,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,-40,-40,-40,0,-40,-40,-40,-40,-40,-40,-40,-40,-40,0,0,-40,-40,-40,0,0,0,-40,-40,0,-40,-40,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-40,-40,-40,-40],[0,0,0,0,0,0,0,-41,0,0,0,0,0,0,-41,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,-46,0,-46,0,0,0,-46,-46,0,0,0,0,-46,0,-46,0,0,-46,0,-46,-46,0,-46,0,0,-46,-46,0,-46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,-42,0,0,0,0,0,0,-42,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,39,0,35,0,0,0,0,40,0,0,0,0,37,0,34,0,0,30,0,36,33,0,32,0,0,29,31,0,38,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,30,0,0,0,0,32,0,0,29,71,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,-48,-48,-48,0,-48,-48,-48,-48,-48,-48,-48,-48,-48,0,0,-48,-48,-48,0,0,0,-48,-48,0,-48,-48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-48,-48,-48,-48],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,127,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,129,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,130,0],[0,39,0,35,0,0,0,0,40,0,0,0,0,37,0,34,0,0,30,0,36,33,0,32,0,0,29,31,0,38,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,133,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,132,0],[0,0,0,0,0,0,0,-18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-18,0],[0,0,0,0,0,0,0,0,0,0,0,134,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,135,0],[0,39,0,35,0,0,0,0,40,0,0,0,0,37,0,34,0,0,30,0,36,33,0,32,0,0,29,31,0,38,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,-55,-55,-55,0,-55,-55,-55,-55,-55,-55,-55,-55,-55,0,0,-55,-55,-55,0,0,0,-55,-55,0,-55,-55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-55,-55,-55,-55],[0,0,-56,-56,-56,0,-56,-56,-56,-56,-56,-56,-56,-56,-56,0,0,-56,-56,-56,0,0,0,-56,-56,0,-56,-56,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-56,-56,-56,-56],[0,0,-54,-54,-54,0,-54,-54,-54,-54,-54,-54,-54,-54,-54,0,0,-54,-54,-54,0,0,0,-54,-54,0,-54,-54,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-54,-54,-54,-54],[0,39,0,35,0,0,0,0,40,0,0,0,0,37,0,34,0,0,30,0,36,33,0,32,0,0,29,31,0,38,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-5,0,-5,-5,-5,-5,-5,-5,-5,-5,-5,0,-5,-5,0,0,0,0],[-6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-6,0,0,-6,0,-6,-6,-6,-6,-6,-6,-6,-6,-6,0,-6,-6,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-4,0,-4,-4,-4,-4,-4,-4,0,0,-4,0,0,-4,0,0,0,0],[0,39,0,35,0,0,0,101,40,0,0,0,0,37,0,34,0,0,30,0,36,33,0,32,0,0,29,31,0,38,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,39,0,35,0,0,0,0,40,0,0,0,0,37,0,34,0,0,30,0,36,33,0,32,0,0,29,31,0,38,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,-51,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-51,0,0],[0,0,0,0,0,0,0,-50,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-50,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-4,0,-4,-4,-4,-4,-4,-4,-4,0,0,0,0,-4,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-4,0,-4,-4,-4,-4,-4,-4,-4,0,0,0,0,-4,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-4,0,-4,-4,-4,-4,-4,-4,0,-4,0,0,0,-4,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-4,0,-4,-4,-4,-4,-4,-4,0,-4,0,0,0,-4,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,145,0],[-16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-16,0,0,-16,0,-16,-16,-16,-16,-16,-16,-16,-16,-16,0,-16,-16,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,30,0,0,0,0,32,0,0,29,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,39,0,35,0,0,0,0,40,0,0,0,0,37,0,34,0,0,30,0,36,33,0,32,0,0,29,31,0,38,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[-17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-17,0,0,-17,0,-17,-17,-17,-17,-17,-17,-17,-17,-17,0,-17,-17,0,0,0,0],[0,0,0,0,-58,0,0,-58,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,-76,0,0,-76,0,0,-76,0,0,0,-76,0,0,0,-76,0,0,0,0,-76,0,0,-76,-76,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-76,-76,-76],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,13,9,7,8,6,12,0,0,148,0,0,10,0,0,0,0],[0,0,0,0,0,0,0,-43,0,0,0,0,0,0,-43,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,-44,0,0,0,0,0,0,-44,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,13,9,7,8,6,12,149,0,0,0,0,10,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,13,9,7,8,6,12,150,0,0,0,0,10,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,13,9,7,8,6,12,0,151,0,0,0,10,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,13,9,7,8,6,12,0,152,0,0,0,10,0,0,0,0],[-12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-12,0,0,-12,0,-12,-12,-12,-12,-12,-12,-12,-12,-12,0,-12,-12,0,0,0,0],[0,0,0,0,0,0,0,-19,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-19,0],[0,0,0,0,0,0,0,-20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-20,0],[-7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-7,0,0,-7,0,-7,-7,-7,-7,-7,-7,-7,-7,-7,0,-7,-7,0,0,0,0],[-8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-8,0,0,-8,0,-8,-8,-8,-8,-8,-8,-8,-8,-8,0,-8,-8,0,0,0,0],[-9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-9,0,0,-9,0,-9,-9,-9,-9,-9,-9,-9,-9,-9,0,-9,-9,0,0,0,0],[-10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-10,0,0,-10,0,-10,-10,-10,-10,-10,-10,-10,-10,-10,0,-10,-10,0,0,0,0],[-11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-11,0,0,-11,0,-11,-11,-11,-11,-11,-11,-11,-11,-11,0,-11,-11,0,0,0,0]],
        "actionIndex":null,
        "actionList":null,
        "tGoto":[{"70":1},{"71":2,"73":3,"62":4},{},{"62":14},{},{},{"68":15,"57":16,"47":17,"56":18,"54":19,"61":20,"55":21,"46":22,"60":23,"51":24,"52":25,"53":26,"48":27,"67":28},{"68":15,"57":16,"47":17,"56":18,"54":19,"61":20,"55":21,"46":22,"60":23,"51":24,"52":25,"53":26,"48":27,"67":41},{"68":15,"57":16,"47":17,"56":18,"54":19,"61":20,"55":21,"46":22,"60":23,"51":24,"52":25,"53":26,"48":27,"67":42},{"68":15,"57":16,"47":17,"56":18,"54":19,"61":20,"55":21,"46":22,"60":23,"51":24,"52":25,"53":26,"48":27,"67":43},{"68":15,"57":16,"47":17,"56":18,"54":19,"61":20,"55":21,"46":22,"60":23,"51":24,"52":25,"53":26,"48":27,"67":46},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{"68":15,"57":16,"47":17,"56":18,"54":19,"61":20,"55":21,"46":22,"60":23,"51":24,"52":25,"53":26,"48":27,"67":61},{},{"49":62,"50":63,"66":64},{"69":67,"68":68,"59":69,"58":70},{"68":15,"57":16,"47":17,"56":18,"54":19,"61":73},{"68":15,"57":16,"47":17,"56":18,"54":19,"61":74},{"69":75,"68":68},{"69":76,"68":68},{},{"68":15,"57":16,"47":17,"56":18,"54":78},{},{},{},{},{"68":15,"57":16,"47":17,"56":18,"54":19,"63":83,"61":20,"55":21,"46":22,"60":23,"51":24,"52":25,"53":26,"48":27,"67":84,"66":85},{"68":15,"57":16,"47":17,"56":18,"54":19,"61":20,"55":21,"46":22,"60":23,"51":24,"52":25,"53":26,"48":27,"67":86},{"68":87},{"68":15,"57":16,"47":17,"56":18,"54":19,"61":88},{"68":15,"57":16,"47":17,"56":18,"54":19,"61":20,"55":89},{"68":15,"57":16,"47":17,"56":18,"54":19,"61":20,"55":90},{"68":15,"57":16,"47":17,"56":18,"54":19,"61":20,"55":21,"46":91},{"68":15,"57":16,"47":17,"56":18,"54":19,"61":20,"55":21,"46":22,"60":92},{"68":15,"57":16,"47":17,"56":18,"54":19,"61":20,"55":21,"46":22,"60":23,"51":93},{"68":15,"57":16,"47":17,"56":18,"54":19,"61":20,"55":21,"46":22,"60":23,"51":24,"52":94},{"68":15,"57":16,"47":17,"56":18,"54":19,"61":20,"55":21,"46":22,"60":23,"51":24,"52":25,"53":26,"48":95},{"72":96},{},{},{"68":15,"57":16,"47":17,"56":18,"54":19,"61":20,"55":21,"46":22,"60":23,"51":24,"52":25,"53":26,"48":27,"67":100},{"68":15,"57":16,"47":17,"56":18,"54":19,"61":20,"55":21,"46":22,"60":23,"51":24,"52":25,"53":26,"48":27,"67":102},{},{},{},{},{},{},{},{},{},{},{"69":106,"68":68,"66":107},{"69":108,"68":68,"66":109},{},{},{"65":111,"64":112,"68":113,"66":114},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{"71":120,"73":3,"62":4},{},{"50":123,"66":124},{},{},{},{},{"68":15,"57":16,"47":17,"56":18,"54":19,"61":20,"55":21,"46":22,"60":23,"51":24,"52":25,"53":26,"48":27,"67":125},{"69":67,"68":68,"58":126},{},{},{},{},{},{"68":15,"57":16,"47":17,"56":18,"54":19,"61":20,"55":21,"46":22,"60":23,"51":24,"52":25,"53":26,"48":27,"67":131},{},{},{},{},{"68":15,"57":16,"47":17,"56":18,"54":19,"61":20,"55":21,"46":22,"60":23,"51":24,"52":25,"53":26,"48":27,"67":136},{},{},{},{"68":15,"57":16,"47":17,"56":18,"54":19,"61":20,"55":21,"46":22,"60":23,"51":24,"52":25,"53":26,"48":137},{},{},{"72":138},{"68":15,"57":16,"47":17,"56":18,"54":19,"61":20,"55":21,"46":22,"60":23,"51":24,"52":25,"53":26,"48":27,"67":139},{"68":15,"57":16,"47":17,"56":18,"54":19,"61":20,"55":21,"46":22,"60":23,"51":24,"52":25,"53":26,"48":27,"67":140},{},{},{"72":141},{"72":142},{"72":143},{"72":144},{},{},{"64":146,"68":113},{"68":15,"57":16,"47":17,"56":18,"54":19,"61":20,"55":21,"46":22,"60":23,"51":24,"52":25,"53":26,"48":27,"67":147},{},{},{},{"71":120,"73":3,"62":4},{},{},{"71":120,"73":3,"62":4},{"71":120,"73":3,"62":4},{"71":120,"73":3,"62":4},{"71":120,"73":3,"62":4},{},{},{},{},{},{},{},{}],
        "tRules":[[74,70],[70],[70,70,71],[70,70,25],[72],[72,72,71],[71,34,67,44,72,38],[71,34,67,44,72,40,72,38],[71,32,67,69,69,44,72,36],[71,32,67,69,66,44,72,36],[71,33,67,69,69,44,72,37],[71,33,67,69,66,44,72,37],[71,31,26,54,11,67,44],[71,31,67,44],[71,41,67,45],[71,73],[71,31,18,27,65,44],[71,31,18,27,66,44],[65,64],[65,65,7,64],[64,68,11,67],[69,27],[69,68],[73,62],[73,73,62],[62,28],[62,35,22,39],[62,30,16,5],[68,23],[68,26],[68,18],[57,27],[57,21],[57,15],[57,68],[57,3,67,4],[57,47],[57,56],[57,20],[47,13,14],[47,13,49,14],[49,50,67],[49,66,67],[49,49,7,50,67],[49,49,7,66,67],[50,7],[50,50,7],[56,29,43],[56,29,59,43],[59,58],[59,59,7,58],[58,69,10,67],[54,57],[54,54,9,68],[54,54,13,67,14],[54,54,3,63,4],[54,54,3,66,4],[63,67],[63,63,7,67],[61,54],[61,1,61],[61,8,61],[55,61],[55,55,19,61],[46,55],[46,46,6,55],[46,46,8,55],[60,46],[60,60,24,46],[51,60],[51,51,17,60],[52,51],[52,52,2,51],[53,52],[53,53,42,52],[48,53],[48,53,12,48,10,48],[67,48],[66]],
        "tCodes":null,
        "objCharset":null
    };

    function parse(lexer, others) {
        var nStart = table.nStart;
        var tSymbols = table.tSymbols;
        var tSymbolIndex = {};
        for (var i = 0; i < tSymbols.length; ++i)
        tSymbolIndex[tSymbols[i]] = i;
        var tAction = table.tAction || table.actionList;
        var tGoto = table.tGoto;
        var tRules = table.tRules;
        var tCodes = table.tCodes;
        var actionIndex = table.actionIndex;
        function $f0($1,$2,$3,$4,$5,$6,$7){var $$;{ $$ = ['each', $2, $6, $4, $3, true]; }return $$;}
        function $f1($1,$2,$3,$4,$5,$6,$7){var $$;{ $$ = ['each', $2, $6, $4, $3, false]; }return $$;}
        function $f2($1,$2,$3,$4,$5){var $$;{ $$ = ['inc', evalStr($3.text), $4]; }return $$;}
        function $f3($1){var $$;{ $$ = [$1]; }return $$;}
        function $f4($1){var $$;{ $$ = $1.text; }return $$;}
        function $f5($1,$2){var $$;{ $$ = Array($1 || 0); $$.push($2); }return $$;}
        function $f6($1,$2,$3,$4){var $$;{ if ($3) $1.length += $3; ($$ = $1).push($4); }return $$;}
        function $f7($1,$2,$3,$4){var $$;{ $$ = ['()', $1, $3]; }return $$;}
        function $f8($1,$2,$3){var $$;{ $$ = [$2.text, $1, $3]; }return $$;}var tFuncs = [,function(){var $$;{ $$ = ['prog', [], []]; }return $$;},function($1,$2){var $$;{ $1[1].push($2); $$ = $1; }return $$;},function($1,$2){var $$;{ $1[2].push($2.text.slice(10, -11)); $$ = $1; }return $$;},function(){var $$;{ $$ = []; }return $$;},function($1,$2){var $$;{ $1.push($2); $$ = $1; }return $$;},function($1,$2,$3,$4,$5){var $$;{ $$ = ['if', $2, $4]; }return $$;},function($1,$2,$3,$4,$5,$6,$7){var $$;{ $$ = ['if', $2, $4, $6]; }return $$;},$f0,$f0,$f1,$f1,function($1,$2,$3,$4,$5,$6){var $$;{ $$ = ['set', $3[0] == 'id' ? $3[1] : $3, $5]; }return $$;},function($1,$2,$3){var $$;{ $$ = ['eval', $2, false]; }return $$;},function($1,$2,$3){var $$;{ $$ = ['eval', $2, true]; }return $$;},function($1){var $$;{ $$ = ['text', $1]; }return $$;},$f2,$f2,$f3,function($1,$2,$3){var $$;{ $$ = $1.concat([$3]); }return $$;},function($1,$2,$3){var $$;{ $$ = [$1.text, $3]; }return $$;},function($1){var $$;{ $$ = evalStr($1.text); }return $$;},$f4,function($1){var $$;{ $$ = $1; }return $$;},function($1,$2){var $$;{ $$ = $1 + $2; }return $$;},$f4,function($1,$2,$3){var $$;{ $$ = $2.text; }return $$;},function($1,$2,$3){var $$;{ $$ = ''; }return $$;},,,,function($1){var $$;{ $$ = ['lit', evalStr($1.text)]; }return $$;},function($1){var $$;{ $$ = ['lit', evalNum($1.text)]; }return $$;},function($1){var $$;{ $$ = ['lit', $1.text == 'true']; }return $$;},function($1){var $$;{ $$ = ['id', $1.text]; }return $$;},function($1,$2,$3){var $$;{ $$ = $2; }return $$;},,,function($1){var $$;{ $$ = ['null']; }return $$;},function($1,$2){var $$;{ $$ = ['array', []]; }return $$;},function($1,$2,$3){var $$;{ $$ = ['array', $2]; }return $$;},$f5,$f5,$f6,$f6,function($1){var $$;{ $$ = 1; }return $$;},function($1,$2){var $$;{ $$ = $1 + 1; }return $$;},function($1,$2){var $$;{ $$ = ['object', []]; }return $$;},function($1,$2,$3){var $$;{ $$ = ['object', $2]; }return $$;},$f3,function($1,$2,$3){var $$;{ $1.push($3); $$ = $1; }return $$;},function($1,$2,$3){var $$;{ $$ = ['init', $1, $3]; }return $$;},,function($1,$2,$3){var $$;{ $$ = ['.', $1, $3.text]; }return $$;},function($1,$2,$3,$4){var $$;{ $$ = ['[]', $1, $3]; }return $$;},$f7,$f7,$f3,function($1,$2,$3){var $$;{ ($$ = $1).push($3); }return $$;},,function($1,$2){var $$;{ $$ = ['!', $2]; }return $$;},function($1,$2){var $$;{ $$ = ['u-', $2]; }return $$;},,$f8,,$f8,$f8,,$f8,,$f8,,$f8,,$f8,,function($1,$2,$3,$4,$5){var $$;{ $$ = ['cond', $1, $3, $5]; }return $$;}];
        function getAction(x, y) {
            return tAction[x][y];
        }
        var stateNum = tAction.length;

        if (actionIndex) {
            getAction = function(x, y) {
                var list = tAction[actionIndex[x]];
                return list[y] || list._;
            };
            stateNum = actionIndex.length;
        }

        function getToken() {
            var t = lexer.scan();
            return t;
        }

        var s = 0;
        var stateStack = [0];
        var a = getToken();
        var valueStack = [];
        var obj = {
            get: function(i) {
                return valueStack[valueStack.length + i];
            },
            set: function(i, v) {
                valueStack[valueStack.length + i] = v;
            }
        };
        if (others) for (var i in others)
            obj[i] = others[i];
        var $smb = valueStack;

        while (1) {
            var $top = $smb.length - 1;
            var t = getAction(s, tSymbolIndex[a.tag]);
            if (!t) {
                var okTokens = [];
                for (var j = 0; j < nStart; ++j) {
                    if (getAction(s, j))
                        okTokens.push(tSymbols[j]);
                }
                err('find ' + a.tag + '\nexpect ' + okTokens.join(' '));
            }
            else if (t > 0) {
                stateStack.push(s = t);
                valueStack.push(a);
                a = getToken();
            }
            else if (t < 0 && t > -32768) {
                var idx = -t;
                var p = tRules[idx];
                var num = p.length - 1;
                stateStack.length -= num;
                s = tGoto[stateStack[stateStack.length - 1]][p[0]];
                stateStack.push(s);

                if (tFuncs[idx]) {
                    var val = tFuncs[idx].apply(obj, valueStack.splice(valueStack.length - num, num));
                    valueStack.push(val);
                }
                else if (num != 1) {
                    valueStack.splice(valueStack.length - num, num, null);
                }
            }
            else {
                if (a.tag != tSymbols[0]) err();
                return valueStack[0];
            }
        }
        function err(msg) {
            throw Error('Syntax error: ' + lexer.getPos(a.index) + (msg ? '\n' + msg : ''));
        }
    }
    return parse;
}();

function isAtom(op) {
	switch (op) {
		case 'id':
		case 'lit':
		case 't':
			return true;
	}
	return false;
}
function isMember(op) {
	return isAtom(op) || op == '.' || op == '[]';
}

function isUnary(op) {
	return isMember(op) || op == '!' || op == 'u-';
}
function isMul(op) {
	if (isUnary(op)) return true;
	switch (op) {
		case '*': case '/': case '%':
			return true;
	}
	return false;
}
function isAdd(op) {
	if (isMul(op)) return true;
	switch (op) {
		case '+': case '-':
			return true;
	}
	return false;
}
function isRel(op) {
	if (isAdd(op)) return true;
	switch (op) {
		case '<': case '>': case '<=': case '>=':
			return true;
	}
	return false;
}
function isEquality(op) {
	if (isRel(op)) return true;
	switch (op) {
		case 'eq': case 'ne':
			return true;
	}
	return false;
}
function isLogicalAnd(op) {
	return isEquality(op) || op == '&&';
}
function isLogicalOr(op) {
	return isLogicalAnd(op) || op == '||';
}
function changeExt(s, ext) {
	return s.replace(/\.\w+$/, '.' + ext);
}
function isCond(op) {
	return isLogicalOr(op) || op == 'cond';
}

/// <reference path="common.js"/>
/// <reference path="codegen_common.js"/>
function codegen_js_tran(prog, encodeName, defaultEncode) {
	/// <param name="prog" type="Array">AST</param>
	/// <param name="encodeName" type="String"></param>
	/// <param name="defaultEncode" type="Boolean"></param>
	/// <returns type="String" />

	var i_tmake = 0;
	function TMake() {
		return '_' + (i_tmake++);
	}

	function emit(s) {
		body.push(s);
	}
	function nodeWithPos(node, pos) {
		node.pos = pos;
		return node;
	}

	function stmtGen(a) {
		switch (a[0]) {
			case 'if':
				emit('if(');
				emit(exprGen(a[1]));
				emit('){');
				stmtsGen(a[2]);
				emit('}');
				if (a[3]) {
					emit('else{');
					stmtsGen(a[3]);
					emit('}');
				}
				break;
			case 'each':
				var keyName = a[3] ? encodeCommonName(a[3]) : TMake();
				var tmpExpr = exprGen(a[1]);
				var tmpStr = joinCode(tmpExpr);
				if (/^\w+$/.test(tmpStr)) {
					var listName = tmpStr;
				}
				else {
					listName = TMake();
					emit('var ' + listName + ' = ');
					emit(tmpExpr);
					emit(';');
				}
				if (a[5]) {
					emit('for(var ' + keyName + '=0;' + keyName + '<');
					//listName + '.length'
					emit(exprGen(['.', nodeWithPos(['t', listName], a[1].pos), 'length']));
					emit(';' + keyName + '++){');
				}
				else emit('for(var ' + keyName + ' in ' + listName + ') {');
				emit('var ' + a[4] + ' = ');
				//listName + '[' + keyName + ']'
				emit(exprGen(['[]', nodeWithPos(['t', listName], a[1].pos), ['t', keyName]]));
				emit(';');
				stmtsGen(a[2]);
				emit('}');
				break;
			case 'set':
				if (typeof a[1] == 'string')
					emit('var ' + encodeCommonName(a[1]) + '=');
				else {
					emit(exprGen(a[1]));
					emit('=');
				}
				emit(exprGen(a[2]));
				emit(';');
				break;
			case 'eval':
				var tmpExpr = exprGen(a[1]);
				var tmpStr = joinCode(tmpExpr);
				if (/^\w+$/.test(tmpStr))
					var tName = tmpStr;
				else {
					tName = '_t';
					emit('_t = ');
					emit(tmpExpr);
					emit(';');
				}
				emit('if(' + tName + ' !=null)_s += ' + ((defaultEncode ? !a[2] : a[2]) ? encodeName + '(' + tName + ')' : tName) + ';');
				break;
			case 'text':
				emit('_s += ' + quote(a[1]) + ';');
				break;
			case 'inc':
				//stmtsGen(a[2][1]);
                var assigns = a[2] || [];
                switch (a[1]) {
                    case 'start':
                        emit('(function(root){');
                        break;
                    case 'end':
                        emit('})({');
			        	emit(assigns.map(function (assign) {
                             return '"' + encodeCommonName(assign[0]) + '": ' + exprGen(assign[1]);
                        }).join(', '));
                        emit('});');
                        break;
                    case 'comment':
                        break;
                    default:
                        throw Error('unknown stmt: ' + a[0]);
		}
	}
	function stmtsGen(a) {
		for (var i = 0; i < a.length; ++i)
			stmtGen(a[i]);
	}

	function joinCode(a) {
		if (typeof a == 'string')
			return a;
		if (a instanceof Array) {
			var r = [];
			for (var i = 0; i < a.length; ++i) {
				r.push(joinCode(a[i]));
			}
			return r.join('');
		}
		throw new Error("unknown type");
	}
	function exprToStr(x, check) {
		var t = exprGen(x);
		if (check && !check(x[0])) t = ['(', t, ')'];
		return t;
	}
	function exprGen(x) {
		return nodeWithPos(exprGen_original(x), x.pos);
	}
	function exprGen_original(x) {
		switch (x[0]) {
			case 't':
				return x[1]; //临时变量直接返回
			case 'id':
				return encodeCommonName(x[1]);
			case 'lit':
				return (typeof x[1] == 'string')
					? quote(x[1])
				: String(x[1]);
			case 'array':
				var tmp = ['['];
				for (var i = 0; i < x[1].length; ++i) {
					if (i > 0) tmp.push(",");
					tmp.push(exprGen(x[1][i]));
				}
				tmp.push(']');
				return tmp;
			case 'object':
				var tmp = ['{'];
				for (var i = 0; i < x[1].length; ++i) {
					if (i > 0) tmp.push(",");
					tmp.push(quote(x[1][i][1]));
					tmp.push(':');
					tmp.push(exprGen(x[1][i][2]));
				}
				tmp.push('}');
				return tmp;
			case 'null':
				return ['null'];
			case '.':
				return [exprToStr(x[1], isMember), '.', x[2]];
			case '[]':
				return [exprToStr(x[1], isMember), '[', exprGen(x[2]), ']'];
			case '()':
				var a = [exprToStr(x[1], isMember), '('];
				if (x[2]) {
					for (var i = 0; i < x[2].length; ++i) {
						if (i > 0) a.push(',');
						a.push(exprGen(x[2][i]));
					}
				}
				a.push(')');
				return a;
			case '!':
				return ['!', exprToStr(x[1], isUnary)];
			case 'u-':
				return ['- ', exprToStr(x[1], isUnary)];
			case '*': case '/': case '%':
				return [exprToStr(x[1], isMul), x[0], exprToStr(x[2], isUnary)];
			case '+': case '-':
				return [exprToStr(x[1], isAdd), x[0], ' ', exprToStr(x[2], isMul)];
			case '<': case '>': case '<=': case '>=':
				return [exprToStr(x[1], isRel), x[0], exprToStr(x[2], isAdd)];
			case '==':
			case '!=':
			case '===':
			case '!==':
				return [exprToStr(x[1], isEquality), x[0], exprToStr(x[2], isRel)];
			case '&&':
				return [exprToStr(x[1], isLogicalAnd), '&&', exprToStr(x[2], isEquality)];
			case '||':
				return [exprToStr(x[1], isLogicalOr), '||', exprToStr(x[2], isLogicalAnd)];
			case 'cond':
				return [exprToStr(x[1], isLogicalOr), '?', exprToStr(x[2], isCond), ':', exprToStr(x[3], isCond)];
			default:
				throw Error("unknown expr: " + x[0]);
		}
	}

	var body = [];
	stmtsGen(prog[1]);

	var posLog = [];

	var jsStr = '';
	function joinJsStr(a) {
		if (typeof a == 'string')
			jsStr += a;
		if (a instanceof Array) {
			if (a.pos) {
				posLog.push([jsStr.length, a.pos]);
			}
			for (var i = 0; i < a.length; ++i) {
				joinJsStr(a[i]);
			}
		}
	}
	joinJsStr(body);

	if (prog[2]) {
		jsStr += prog[2].join(';');
	}
	//alert(posLog.join('\n'));
	var strObj = new String(jsStr);
	strObj.posLog = posLog;
	return strObj;
}

/// <reference path="codegen_js.js"/>
function parsetmpl(s) {
	/// <summary>解析模板，得到语法树</summary>
	/// <param name="s" type="String">模板</param>
	var ast = parse(Lexer(s));
	return ast;
}
function compile2jsfn(s, config) {
	/// <summary>编译模板，得到一个 js 函数</summary>
	/// <param name="config" type="Object" optional="true"></param>
	/// <param name="s" type="String">模板</param>
	/// <returns type="Function" />
	var ast = parsetmpl(s);
	var encodeName;
	if (config) encodeName = config.htmlEncode;
	s = codegen_js_tran(ast, encodeName || '_htmlEncode', true);
	var body = '';
	if (!encodeName)
		body = "var _obj = { '<': '&lt;', '>': '&gt;', '&': '&amp;', '\"': '&quot;' };\
	function _htmlEncode(s) {\
		return String(s).replace(/[<>&\"]/g, function(c) {\
			return _obj[c];\
		});\
	}";
	body += "var _t,_s = '';";
	if (config && config.debug) {
		var posLog = s.posLog;
		body += 'try{\n';
		body += 'eval(' + JSON.stringify(s) + ');';
		body += '}catch(_e){throw ' + function(e, posLog) {
			var msg = e.stack;
			var msgLines = msg.split(/\r\n?|\n/);
			var re_pos = /:(\d+):(\d+)\)$/m;
			var m = re_pos.exec(msgLines[1]);
			//var row = +m[1];
			//if (row != 1) throw Error("row != 1");
			var col = +m[2];
			var pos = null;
			for (var i = 0; i < posLog.length; ++i) {
				if (posLog[i][0] + 1 >= col) {
					pos = posLog[i][1];
					break;
				}
			}
			//if (pos == null) throw Error("pos == null");
			function posToString(pos) {
				return '(' + pos.row + ',' + pos.col + ')';
			}
			return Error('CroxError: ' + posToString(pos.pos) + '\n' + msg);
		} + '(_e,' + JSON.stringify(posLog) + ');}';
	}
	else {
		body += s;
	}
	body += "return _s;";

	var f = Function('root', body);
	return f;
}
var Crox = {
	parse: parsetmpl,
	compile: compile2jsfn,
	render: function(s, data) {
		/// <summary>将数据 data 填充到模板 s</summary>
		/// <param name="s" type="String">模板</param>
		/// <returns type="String" />
		var fn = compile2jsfn(s);
		return fn(data);
	}
};

/// <reference path="common.js"/>
/// <reference path="codegen_common.js"/>
function codegen_php_tran(prog, defaultEncode) {
	/// <param name="prog" type="Array">AST</param>
	/// <param name="defaultEncode" type="Boolean"></param>
	/// <returns type="String" />

	//用户变量名 都奇数个下划线开头
	function encodeId(s) {
		return '$crox_' + encodeCommonName(s);
	}
	function emit(t) {
		s += t;
	}
	function compileEval(stmt) {
		var t = walkExpr(stmt[1]);
		emit('crox_echo(' + t + ', ' + (defaultEncode ? !stmt[2] : stmt[2]) + ');');
	}
	function compileContent(stmt) {
		var t = stmt[1];
		if (/<\?(?:php)?|\?>/.test(t))
			emit('echo ' + phpQuote(stmt[1]) + ';');
		else {
			emit('?>' + t + '<?php ');
		}
	}
	function compileIf(stmt) {
		emit('if(' + walkExpr(stmt[1]) + '){');
		compileStmts(stmt[2]);
		emit('}');
		if (stmt[3]) {
			emit('else{');
			compileStmts(stmt[3]);
			emit('}');
		}
	}
	function compileEach(stmt) {
		emit('foreach(' + walkExpr(stmt[1]) + ' as ' + (stmt[3] ? encodeId(stmt[3]) + '=>' : '') + encodeId(stmt[4]) + ')');
		emit('{');
		compileStmts(stmt[2]);
		emit('}');
	}
	function compileSet(stmt) {
		emit(encodeId(stmt[1]) + ' = ' + walkExpr(stmt[2]) + ';');
	}
    function compileInc(stmt) {
        var path = stmt[1];
        var assigns = stmt[2] || [];
        var names = [];
        var vals = [];
        assigns.forEach(function (assign) {
            var name = encodeId(assign[0]);
            var val = walkExpr(assign[1]);
            names.push(name);
            vals.push(val);
        });
        emit('$crox_include = function ($crox_root) {');
        emit('include dirname(__FILE__) . \'/' + changeExt(path, 'php') + '\';');
        emit('};');
        emit('$crox_params = (object) array(')
        assigns.forEach(function (assign) {
            emit('"' + assign[0] + '" => ' + walkExpr(assign[1]) + ',');
        });
        emit(');');
        emit('$crox_include($crox_params);')
    }
	function compileStmt(a) {
		switch (a[0]) {
			case 'if': compileIf(a); break;
			case 'each': compileEach(a); break;
			case 'set': compileSet(a); break;
			case 'eval': compileEval(a); break;
			case 'text': compileContent(a); break;
            case 'inc': compileInc(a); break;
            case 'comment': console.log('xxx'); break;
			default: throw Error('unknown stmt: ' + a[0]);
		}
	}
	function compileStmts(a) {
		for (var i = 0; i < a.length; ++i)
			compileStmt(a[i]);
	}

	function exprToStr(x, check) {
		var t = walkExpr(x);
		if (check && !check(x[0])) t = '(' + t + ')';
		return t;
	}
	function walkExpr(x) {
		switch (x[0]) {
			case 'id':
				return encodeId(x[1]);
			case 'lit':
				if (typeof x[1] == 'string')
					return phpQuote(x[1]);
				return String(x[1]);
			case '.':
				return exprToStr(x[1], isMember) + "->" + x[2];
			case '[]':
				return exprToStr(x[1], isMember) + '[' + walkExpr(x[2]) + ']';
			case '!':
				return '!crox_ToBoolean(' + exprToStr(x[1], isUnary) + ')';
			case 'u-':
				return '- ' + exprToStr(x[1], isUnary);
			case '*': case '/': case '%':
				return exprToStr(x[1], isMul) + x[0] + exprToStr(x[2], isUnary);
			case '+':
				return 'crox_plus(' + exprToStr(x[1], null) + ', ' + exprToStr(x[2], null) + ')';
			case '-':
				return exprToStr(x[1], isAdd) + '- ' + exprToStr(x[2], isMul);
			case '<': case '>': case '<=': case '>=':
				return exprToStr(x[1], isRel) + x[0] + exprToStr(x[2], isAdd);
			case '==':
			case '!=':
			case '===':
			case '!==':
				return exprToStr(x[1], isEquality) + x[0] + exprToStr(x[2], isRel);
			case '&&':
				return 'crox_logical_and(' + exprToStr(x[1], null) + ', ' + exprToStr(x[2], null) + ')';
			case '||':
				return 'crox_logical_or(' + exprToStr(x[1], null) + ', ' + exprToStr(x[2], null) + ')';
			default:
				throw Error("unknown expr: " + x[0]);
		}
	}

	var s = "";
	compileStmts(prog[1]);
	if (s.slice(0, 2) == '?>')
		s = s.slice(2);
	else s = '<?php ' + s;
	if (s.slice(-6) == '<?php ')
		s = s.slice(0, -6);
	else s += '?>';
	return s;
}

/// <reference path="common.js"/>
/// <reference path="codegen_common.js"/>
function codegen_vm_tran(prog) {
	/// <param name="prog" type="Array">AST</param>
	/// <returns type="String" />

	//用户变量名 都奇数个下划线开头，临时变量都不下划线开头
	function encodeId(s) {
		return '$crox_' + encodeCommonName(s);
	}
	function isName(s) {
		return /^$\w+$/.test(s);
	}
	function emit(s) {
		body += s;
	}
	var i_each = 0;
	function stmtGen(a) {
		switch (a[0]) {
			case 'if':
				emit('#if(' + exprGen(a[1]) + ')');
				stmtsGen(a[2]);
				if (a[3]) {
					emit('#{else}');
					stmtsGen(a[3]);
				}
				emit('#{end}');
				break;
			case 'each':
				++i_each;
				var sExpr = exprGen(a[1]);
				if (isName(sExpr))
					var listName = sExpr;
				else {
					listName = '$list' + (i_each == 1 ? '' : i_each);
					emit('#set (' + listName + ' = ' + sExpr + ')');
				}
				if (a[5]) { //array
					emit('#foreach(' + encodeId(a[4]) + ' in ' + listName + ')');
					if (a[3]) {
						emit('#set(' + encodeId(a[3]) + ' = $velocityCount - 1)');
					}
				}
				else { //object
					if (a[3]) {
						emit('#foreach(' + encodeId(a[3]) + ' in ' + listName + '.keySet())');
						emit('#set(' + encodeId(a[4]) + ' =' + listName + '.get(' + encodeId(a[3]) + '))');
					}
					else {
						emit('#foreach(' + encodeId(a[4]) + ' in ' + listName + ')');
					}
				}
				stmtsGen(a[2]);
				emit('#{end}');
				--i_each;
				break;
			case 'set':
				emit('#set (' + encodeId(a[1]) + '=' + exprGen(a[2]) + ')');
				break;
			case 'eval':
				var s = exprGen(a[1]);
				if (isName(s))
					emit('$!{' + s.slice(1) + '}');
				else {
					emit('#set($t = ' + s + ')$!{t}');
				}
				break;
			case 'text':
				emit(a[1].replace(/\$/g, '$${dollar}').replace(/#/g, '$${sharp}'));
				break;
			case 'inc':
				emit("#parse('" + changeExt(a[1], 'vm') + "')");
				break;
			default:
				throw Error('unknown stmt: ' + a[0]);
		}
	}
	function stmtsGen(a) {
		for (var i = 0; i < a.length; ++i)
			stmtGen(a[i]);
	}

	function exprToStr(x, check) {
		var t = exprGen(x);
		if (check && !check(x[0])) t = '(' + t + ')';
		return t;
	}
	function exprGen(x) {
		switch (x[0]) {
			case 'id':
				return encodeId(x[1]);
			case 'lit':
				if (typeof x[1] == 'string')
					return vmQuote(x[1]);
				return String(x[1]);
			case '.':
				return exprToStr(x[1], isMember) + '.' + x[2];
			case '[]':
				return exprToStr(x[1], isMember) + '[' + exprGen(x[2]) + ']';
			case '!':
				return '!' + exprToStr(x[1], isUnary);
			case 'u-':
				if (x[1][0] == 'u-') throw Error("禁止两个负号连用");
				return '-' + exprToStr(x[1], isUnary);
			case '*': case '/': case '%':
				return exprToStr(x[1], isMul) + x[0] + exprToStr(x[2], isUnary);
			case '+': case '-':
				return exprToStr(x[1], isAdd) + x[0] + ' ' + exprToStr(x[2], isMul);
			case '<': case '>': case '<=': case '>=':
				return exprToStr(x[1], isRel) + x[0] + exprToStr(x[2], isAdd);
			case '==':
			case '!=':
			case '===':
			case '!==':
				return exprToStr(x[1], isEquality) + x[0].slice(0, 2) + exprToStr(x[2], isRel);
			case '&&':
				return exprToStr(x[1], isLogicalAnd) + '&&' + exprToStr(x[2], isEquality);
			case '||':
				return exprToStr(x[1], isLogicalOr) + '||' + exprToStr(x[2], isLogicalAnd);
			default:
				throw Error("unknown expr: " + x[0]);
		}
	}
	function vmQuote(s) {
		/// <param name="s" type="String"></param>
		if (s.indexOf("'") == -1) return "'" + s + "'";
		var a = s.split("'");
		return "('" + a.join("'+\"'\"+'") + "')";
	}
	var body = "#set($dollar='$')#set($sharp='#')";
	stmtsGen(prog[1]);

	return body;
}

/// <reference path="crox_js.js"/>
/// <reference path="codegen_php.js"/>
/// <reference path="codegen_vm.js"/>
Crox.compileToPhp = function(s) {
	/// <summary>返回编译后的 php</summary>
	/// <param name="s" type="String"></param>
	/// <returns type="String" />
	return codegen_php_tran(parsetmpl(s), true);
};
Crox.compileToVM = function(s, currentPath) {
	/// <summary>返回编译后的 VM 模板</summary>
	/// <param name="s" type="String"></param>
	/// <returns type="String" />
	return codegen_vm_tran(parsetmpl(s));
};

Crox.version = "1.4.4";return Crox;})();if ( typeof module == "object" && module && typeof module.exports == "object" ) module.exports = Crox;else if (typeof define == "function" && (define.amd || define.cmd) ) define(function () { return Crox; } );else if (typeof KISSY != "undefined") KISSY.add(function(){ return Crox; });if (root) root.Crox = Crox; })(this);
