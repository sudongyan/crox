#start program;
program:
	{ $$ = ['prog', [], []]; }
|	program statement { $1[1].push($2); $$ = $1; }
|	program script { $1[2].push($2.text.slice(10, -11)); $$ = $1; }
;
statements:
	{ $$ = []; }
|	statements statement { $1.push($2); $$ = $1; }
;
statement:
	"{{#if" expr "}}" statements "{{/if}}" { $$ = ['if', $2, $4]; }
|	"{{#if" expr "}}" statements "{{else}}" statements "{{/if}}" { $$ = ['if', $2, $4, $6]; }
|	"{{#each" expr name name? "}}" statements "{{/each}}" { $$ = ['each', $2, $6, $4, $3, true]; }
|	"{{#forin" expr name name? "}}" statements "{{/forin}}" { $$ = ['each', $2, $6, $4, $3, false]; }
|	"{{" "set" MemberExpression "=" expr "}}" { $$ = ['set', $3[0] == 'id' ? $3[1] : $3, $5]; }
|	"{{" expr "}}" { $$ = ['eval', $2, false]; }
|	"{{{" expr "}}}" { $$ = ['eval', $2, true]; }
|	texts { $$ = ['text', $1]; }
|   "{{" include string assigns? "}}" { $$ = ['inc', evalStr($3.text), $4]; }
;

assigns:
     assign { $$ = [$1]; }
|    assigns "," assign { $$ = $1.concat([$3]); }
;

assign:
     id "=" expr { $$ = [$1.text, $3]; }
;

name:
	string { $$ = evalStr($1.text); }
|	id { $$ = $1.text; }
;
texts:
	_text { $$ = $1; }
|	texts _text { $$ = $1 + $2; }
;
_text:
	text { $$ = $1.text; }
|	"{{#raw}}" rawtext "{{/raw}}" { $$ = $2.text; }
|   "{*" commenttext "*}" { $$ = ''; }
;
id: realId | set | include;

PrimaryExpression:
	string { $$ = ['lit', evalStr($1.text)]; }
|	number { $$ = ['lit', evalNum($1.text)]; }
|	boolean { $$ = ['lit', $1.text == 'true']; }
|	id { $$ = ['id', $1.text]; }
|	"(" expr ")" { $$ = $2; }
|	ArrayLiteral
|	ObjectLiteral
|	null { $$ = ['null']; }
;
ArrayLiteral:
	"[" "]" { $$ = ['array', []]; }
|	"[" ElementList "]" { $$ = ['array', $2]; }
;
ElementList :
	Elision? expr { $$ = Array($1 || 0); $$.push($2); }
|	ElementList "," Elision? expr { if ($3) $1.length += $3; ($$ = $1).push($4); }
;
Elision:
	"," { $$ = 1; }
|	Elision "," { $$ = $1 + 1; }
;
ObjectLiteral :
	"{" "}" { $$ = ['object', []]; }
|	"{" PropertyNameAndValueList "}" { $$ = ['object', $2]; }
;
PropertyNameAndValueList :
	PropertyAssignment { $$ = [$1]; }
|	PropertyNameAndValueList "," PropertyAssignment { $1.push($3); $$ = $1; }
;
PropertyAssignment:
	name ":" expr { $$ = ['init', $1, $3]; }
;

MemberExpression:
	PrimaryExpression
|	MemberExpression "." id { $$ = ['.', $1, $3.text]; }
|	MemberExpression "[" expr "]" { $$ = ['[]', $1, $3]; }
|	MemberExpression "(" args? ")" { $$ = ['()', $1, $3]; }
;
args:
	expr { $$ = [$1]; }
|	args "," expr { ($$ = $1).push($3); }
;
UnaryExpression:
	MemberExpression
|	"!" UnaryExpression { $$ = ['!', $2]; }
|	"-" UnaryExpression { $$ = ['u-', $2]; }
;
MultiplicativeExpression:
	UnaryExpression
|	MultiplicativeExpression mul UnaryExpression { $$ = [$2.text, $1, $3]; }
;
AdditiveExpression:
	MultiplicativeExpression
|	AdditiveExpression "+" MultiplicativeExpression { $$ = [$2.text, $1, $3]; }
|	AdditiveExpression "-" MultiplicativeExpression { $$ = [$2.text, $1, $3]; }
;
RelationalExpression:
	AdditiveExpression
|	RelationalExpression rel AdditiveExpression { $$ = [$2.text, $1, $3]; }
;
EqualityExpression:
	RelationalExpression
|	EqualityExpression eq RelationalExpression { $$ = [$2.text, $1, $3]; }
;
LogicalAndExpression:
	EqualityExpression
|	LogicalAndExpression "&&" EqualityExpression { $$ = [$2.text, $1, $3]; }
;
LogicalOrExpression:
	LogicalAndExpression
|	LogicalOrExpression "||" LogicalAndExpression { $$ = [$2.text, $1, $3]; }
;
ConditionalExpression:
	LogicalOrExpression
|	LogicalOrExpression "?" ConditionalExpression ":" ConditionalExpression { $$ = ['cond', $1, $3, $5]; }
;
expr:
	ConditionalExpression
;
